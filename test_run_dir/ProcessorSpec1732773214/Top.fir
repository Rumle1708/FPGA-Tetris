;buildInfoPackage: chisel3, version: 3.4.1, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Top : 
  module ClockDivider : 
    input clock : Clock
    input reset : Reset
    output io : {tick : UInt<1>}
    
    reg cntReg : SInt, clock with : (reset => (reset, asSInt(UInt<3>("h02")))) @[ClockDivider.scala 8:25]
    io.tick <= UInt<1>("h00") @[ClockDivider.scala 9:13]
    node _T = sub(cntReg, asSInt(UInt<2>("h01"))) @[ClockDivider.scala 11:22]
    node _T_1 = tail(_T, 1) @[ClockDivider.scala 11:22]
    node _T_2 = asSInt(_T_1) @[ClockDivider.scala 11:22]
    cntReg <= _T_2 @[ClockDivider.scala 11:12]
    node _T_3 = bits(cntReg, 2, 2) @[ClockDivider.scala 12:16]
    when _T_3 : @[ClockDivider.scala 12:35]
      cntReg <= asSInt(UInt<3>("h02")) @[ClockDivider.scala 13:16]
      io.tick <= UInt<1>("h01") @[ClockDivider.scala 14:17]
      skip @[ClockDivider.scala 12:35]
    
  module HorizontalCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip pxlCLK : UInt<1>, horCnt : UInt<10>, horSync : UInt<1>, dispTime : UInt<1>, enVCnt : UInt<1>}
    
    reg cntReg : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[HorizontalCounter.scala 24:23]
    reg outputReg1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[HorizontalCounter.scala 25:27]
    reg outputReg2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[HorizontalCounter.scala 26:27]
    io.horSync <= outputReg1 @[HorizontalCounter.scala 29:14]
    io.dispTime <= outputReg2 @[HorizontalCounter.scala 30:15]
    io.horCnt <= cntReg @[HorizontalCounter.scala 31:13]
    io.enVCnt <= UInt<1>("h00") @[HorizontalCounter.scala 32:13]
    when io.pxlCLK : @[HorizontalCounter.scala 34:19]
      node _T = add(cntReg, UInt<1>("h01")) @[HorizontalCounter.scala 35:22]
      node _T_1 = tail(_T, 1) @[HorizontalCounter.scala 35:22]
      cntReg <= _T_1 @[HorizontalCounter.scala 35:12]
      node _T_2 = sub(UInt<6>("h020"), UInt<1>("h01")) @[HorizontalCounter.scala 36:34]
      node _T_3 = tail(_T_2, 1) @[HorizontalCounter.scala 36:34]
      node _T_4 = eq(cntReg, _T_3) @[HorizontalCounter.scala 36:17]
      when _T_4 : @[HorizontalCounter.scala 36:40]
        node _T_5 = not(outputReg2) @[HorizontalCounter.scala 37:21]
        outputReg2 <= _T_5 @[HorizontalCounter.scala 37:18]
        skip @[HorizontalCounter.scala 36:40]
      node _T_6 = add(UInt<6>("h020"), UInt<5>("h010")) @[HorizontalCounter.scala 39:34]
      node _T_7 = tail(_T_6, 1) @[HorizontalCounter.scala 39:34]
      node _T_8 = sub(_T_7, UInt<1>("h01")) @[HorizontalCounter.scala 39:48]
      node _T_9 = tail(_T_8, 1) @[HorizontalCounter.scala 39:48]
      node _T_10 = eq(cntReg, _T_9) @[HorizontalCounter.scala 39:17]
      when _T_10 : @[HorizontalCounter.scala 39:54]
        node _T_11 = not(outputReg1) @[HorizontalCounter.scala 40:21]
        outputReg1 <= _T_11 @[HorizontalCounter.scala 40:18]
        skip @[HorizontalCounter.scala 39:54]
      node _T_12 = add(UInt<6>("h020"), UInt<5>("h010")) @[HorizontalCounter.scala 42:34]
      node _T_13 = tail(_T_12, 1) @[HorizontalCounter.scala 42:34]
      node _T_14 = add(_T_13, UInt<7>("h060")) @[HorizontalCounter.scala 42:48]
      node _T_15 = tail(_T_14, 1) @[HorizontalCounter.scala 42:48]
      node _T_16 = sub(_T_15, UInt<1>("h01")) @[HorizontalCounter.scala 42:61]
      node _T_17 = tail(_T_16, 1) @[HorizontalCounter.scala 42:61]
      node _T_18 = eq(cntReg, _T_17) @[HorizontalCounter.scala 42:17]
      when _T_18 : @[HorizontalCounter.scala 42:67]
        node _T_19 = not(outputReg1) @[HorizontalCounter.scala 43:21]
        outputReg1 <= _T_19 @[HorizontalCounter.scala 43:18]
        skip @[HorizontalCounter.scala 42:67]
      node _T_20 = add(UInt<6>("h020"), UInt<5>("h010")) @[HorizontalCounter.scala 45:34]
      node _T_21 = tail(_T_20, 1) @[HorizontalCounter.scala 45:34]
      node _T_22 = add(_T_21, UInt<7>("h060")) @[HorizontalCounter.scala 45:48]
      node _T_23 = tail(_T_22, 1) @[HorizontalCounter.scala 45:48]
      node _T_24 = add(_T_23, UInt<6>("h030")) @[HorizontalCounter.scala 45:61]
      node _T_25 = tail(_T_24, 1) @[HorizontalCounter.scala 45:61]
      node _T_26 = sub(_T_25, UInt<1>("h01")) @[HorizontalCounter.scala 45:74]
      node _T_27 = tail(_T_26, 1) @[HorizontalCounter.scala 45:74]
      node _T_28 = eq(cntReg, _T_27) @[HorizontalCounter.scala 45:17]
      when _T_28 : @[HorizontalCounter.scala 45:80]
        cntReg <= UInt<1>("h00") @[HorizontalCounter.scala 46:14]
        node _T_29 = not(outputReg2) @[HorizontalCounter.scala 47:21]
        outputReg2 <= _T_29 @[HorizontalCounter.scala 47:18]
        io.enVCnt <= UInt<1>("h01") @[HorizontalCounter.scala 48:17]
        skip @[HorizontalCounter.scala 45:80]
      skip @[HorizontalCounter.scala 34:19]
    
  module VerticalCounter : 
    input clock : Clock
    input reset : Reset
    output io : {flip enVCnt : UInt<1>, verCnt : UInt<10>, verSync : UInt<1>, dispTime : UInt<1>}
    
    reg cntReg : UInt<10>, clock with : (reset => (reset, UInt<10>("h00"))) @[VerticalCounter.scala 22:23]
    reg outputReg1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[VerticalCounter.scala 23:27]
    reg outputReg2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[VerticalCounter.scala 24:27]
    io.verSync <= outputReg1 @[VerticalCounter.scala 27:14]
    io.dispTime <= outputReg2 @[VerticalCounter.scala 28:15]
    io.verCnt <= cntReg @[VerticalCounter.scala 29:13]
    when io.enVCnt : @[VerticalCounter.scala 31:19]
      node _T = add(cntReg, UInt<1>("h01")) @[VerticalCounter.scala 32:22]
      node _T_1 = tail(_T, 1) @[VerticalCounter.scala 32:22]
      cntReg <= _T_1 @[VerticalCounter.scala 32:12]
      node _T_2 = sub(UInt<6>("h020"), UInt<1>("h01")) @[VerticalCounter.scala 33:34]
      node _T_3 = tail(_T_2, 1) @[VerticalCounter.scala 33:34]
      node _T_4 = eq(cntReg, _T_3) @[VerticalCounter.scala 33:17]
      when _T_4 : @[VerticalCounter.scala 33:40]
        node _T_5 = not(outputReg2) @[VerticalCounter.scala 34:21]
        outputReg2 <= _T_5 @[VerticalCounter.scala 34:18]
        skip @[VerticalCounter.scala 33:40]
      node _T_6 = add(UInt<6>("h020"), UInt<4>("h0a")) @[VerticalCounter.scala 36:34]
      node _T_7 = tail(_T_6, 1) @[VerticalCounter.scala 36:34]
      node _T_8 = sub(_T_7, UInt<1>("h01")) @[VerticalCounter.scala 36:48]
      node _T_9 = tail(_T_8, 1) @[VerticalCounter.scala 36:48]
      node _T_10 = eq(cntReg, _T_9) @[VerticalCounter.scala 36:17]
      when _T_10 : @[VerticalCounter.scala 36:54]
        node _T_11 = not(outputReg1) @[VerticalCounter.scala 37:21]
        outputReg1 <= _T_11 @[VerticalCounter.scala 37:18]
        skip @[VerticalCounter.scala 36:54]
      node _T_12 = add(UInt<6>("h020"), UInt<4>("h0a")) @[VerticalCounter.scala 39:34]
      node _T_13 = tail(_T_12, 1) @[VerticalCounter.scala 39:34]
      node _T_14 = add(_T_13, UInt<2>("h02")) @[VerticalCounter.scala 39:48]
      node _T_15 = tail(_T_14, 1) @[VerticalCounter.scala 39:48]
      node _T_16 = sub(_T_15, UInt<1>("h01")) @[VerticalCounter.scala 39:61]
      node _T_17 = tail(_T_16, 1) @[VerticalCounter.scala 39:61]
      node _T_18 = eq(cntReg, _T_17) @[VerticalCounter.scala 39:17]
      when _T_18 : @[VerticalCounter.scala 39:67]
        node _T_19 = not(outputReg1) @[VerticalCounter.scala 40:21]
        outputReg1 <= _T_19 @[VerticalCounter.scala 40:18]
        skip @[VerticalCounter.scala 39:67]
      node _T_20 = add(UInt<6>("h020"), UInt<4>("h0a")) @[VerticalCounter.scala 42:34]
      node _T_21 = tail(_T_20, 1) @[VerticalCounter.scala 42:34]
      node _T_22 = add(_T_21, UInt<2>("h02")) @[VerticalCounter.scala 42:48]
      node _T_23 = tail(_T_22, 1) @[VerticalCounter.scala 42:48]
      node _T_24 = add(_T_23, UInt<6>("h021")) @[VerticalCounter.scala 42:61]
      node _T_25 = tail(_T_24, 1) @[VerticalCounter.scala 42:61]
      node _T_26 = sub(_T_25, UInt<1>("h01")) @[VerticalCounter.scala 42:74]
      node _T_27 = tail(_T_26, 1) @[VerticalCounter.scala 42:74]
      node _T_28 = eq(cntReg, _T_27) @[VerticalCounter.scala 42:17]
      when _T_28 : @[VerticalCounter.scala 42:80]
        cntReg <= UInt<1>("h00") @[VerticalCounter.scala 43:14]
        node _T_29 = not(outputReg2) @[VerticalCounter.scala 44:21]
        outputReg2 <= _T_29 @[VerticalCounter.scala 44:18]
        skip @[VerticalCounter.scala 42:80]
      skip @[VerticalCounter.scala 31:19]
    
  module Top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {HS : UInt<1>}
    
    inst clkdiv of ClockDivider @[Top.scala 14:24]
    clkdiv.clock <= clock
    clkdiv.reset <= reset
    inst horCounter of HorizontalCounter @[Top.scala 15:28]
    horCounter.clock <= clock
    horCounter.reset <= reset
    inst verCounter of VerticalCounter @[Top.scala 16:28]
    verCounter.clock <= clock
    verCounter.reset <= reset
    horCounter.io.pxlCLK <= clkdiv.io.tick @[Top.scala 17:26]
    verCounter.io.enVCnt <= horCounter.io.enVCnt @[Top.scala 18:26]
    node _T = and(verCounter.io.dispTime, verCounter.io.verSync) @[Top.scala 20:40]
    node _T_1 = bits(verCounter.io.verCnt, 0, 0) @[Top.scala 20:88]
    node nice2 = and(_T, _T_1) @[Top.scala 20:65]
    node _T_2 = and(clkdiv.io.tick, horCounter.io.dispTime) @[Top.scala 22:29]
    node _T_3 = and(_T_2, horCounter.io.horSync) @[Top.scala 22:55]
    node _T_4 = and(_T_3, horCounter.io.enVCnt) @[Top.scala 22:80]
    node _T_5 = bits(horCounter.io.horCnt, 0, 0) @[Top.scala 22:111]
    node _T_6 = and(_T_4, _T_5) @[Top.scala 22:104]
    node _T_7 = bits(nice2, 0, 0) @[Top.scala 22:123]
    node _T_8 = and(_T_6, _T_7) @[Top.scala 22:115]
    io.HS <= _T_8 @[Top.scala 22:11]
    
